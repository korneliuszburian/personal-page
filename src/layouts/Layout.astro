---
import "../css/global.css";
import { ClientRouter } from "astro:transitions";
interface Props {
  title: string;
}
const { title } = Astro.props;
---
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Thrifted streetwear shop" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Outfit:wght@300;400;600&display=swap"
      rel="stylesheet"
    />
    <link
      href="https://fonts.googleapis.com/css2?family=Rajdhani:wght@300;500;700&display=swap"
      rel="stylesheet"
    />
    <title>{title}</title>
    <ClientRouter />
  </head>
  <body>
    <!-- Loading screen -->
    <div id="loading-screen" transition:persist>
      <div class="loader"></div>
    </div>

    <!-- Three.js scene container -->
    <div id="scene-container" transition:persist>
      <!-- Three.js canvas will be inserted here -->
    </div>

    <!-- Continue prompt -->
    <div id="continue-prompt" class="hidden" transition:persist>
      Press Space or Click Logo to Continue
    </div>

    <!-- Menu overlay -->
    <div id="menu" class="menu hidden" transition:persist>
      <nav>
        <ul>
          <li><a href="#" class="strike">Nowa kolekcja</a></li>
          <li><a href="/photos">ZdjÄ™cia</a></li>
          <li><a href="#posters">Plakaty</a></li>
          <li><a href="#items">Itemy</a></li>
        </ul>
      </nav>
    </div>

    <!-- Page content container -->
    <main id="page-content">
      <slot />
    </main>

    <script>
      import { EventHandler } from "../utils/EventHandler";
      import { Scene } from "../components/Scene";
      import { AppState, APP_STATES } from "../utils/AppState";
      import { UIManager } from "../utils/UIManager";

      // Ensure we have global type declarations
      if (typeof window !== "undefined") {
        window.sceneInstance = window.sceneInstance || null;
        window.navBackToHome = window.navBackToHome || false;
      }

      // Initialize the site when DOM is ready
      document.addEventListener("DOMContentLoaded", () => {
        console.log("DOM ready, initializing application");

        // Initialize scene first
        initScene();

        // Then initialize state management and event handlers
        AppState.initialize();
        EventHandler.initialize();
        UIManager.initialize();

        // Enable debug mode for development
        const isDevMode = window.location.hostname === 'localhost' ||
                        window.location.hostname === '127.0.0.1';
        if (isDevMode) {
          AppState.setDebugMode(true);
          EventHandler.setDebugMode(true);
          UIManager.setDebugMode(true);
        }
      });

      // Create the 3D scene
      function initScene() {
        const container = document.getElementById("scene-container");
        if (container && !document.querySelector("#scene-container canvas")) {
          console.log("Creating new Scene instance");
          new Scene(container); // Scene registers itself as window.sceneInstance
        }
      }

      // Handle page transitions
      document.addEventListener("astro:before-preparation", (e) => {
        console.log("Preparing for navigation to:", e.to);

        // Detect navigation direction
        const isNavigatingToHome = e.to === '/' || e.to.pathname.endsWith('/');
        const isLeavingHomePage = window.location.pathname === '/' ||
                                window.location.pathname === '';

        // Prepare UI for transition
        if (UIManager) {
          UIManager.handlePageTransition(true, isLeavingHomePage);
        }

        // Prepare AppState for transition
        if (isNavigatingToHome && !isLeavingHomePage) {
          AppState.prepareForTransition(true);
        } else if (isLeavingHomePage) {
          AppState.prepareForTransition(false);
        }
      });

      document.addEventListener("astro:before-navigation", () => {
        // Additional preparation before navigation starts
        if (AppState.isTransitioning) {
          console.log("Cleaning up animations before navigation");
        }
      });

      document.addEventListener("astro:after-navigation", () => {
        // Flag for back-to-home navigation detection
        const isBackToHome = window.navBackToHome &&
                          (window.location.pathname === "/" ||
                           window.location.pathname === "");

        if (isBackToHome && window.sceneInstance) {
          // Use the special back-to-home handler
          if (typeof window.sceneInstance.handleReturnToHome === "function") {
            window.sceneInstance.handleReturnToHome();
          } else {
            // Fallback to regular reset
            window.sceneInstance.resetTransitionState();
          }

          // Reset the flag
          window.navBackToHome = false;
        } else if (window.sceneInstance) {
          // Regular navigation reset
          window.sceneInstance.resetTransitionState();
        }

        // Update UI for the new page
        if (UIManager) {
          const isHomePage = window.location.pathname === '/' ||
                           window.location.pathname === '';
          UIManager.handlePageTransition(false, isHomePage);
        }
      });

      document.addEventListener("astro:page-load", () => {
        console.log("Page fully loaded, ensuring handlers are active");

        // Always reinitialize event handlers after page load
        if (typeof EventHandler.initialize === "function") {
          EventHandler.initialize();
        }

        // Enforce correct UI state
        if (UIManager) {
          UIManager.enforceCorrectUIState(AppState);
        }

        // Force a final state reset on the scene
        if (window.sceneInstance) {
          const isHomePage = window.location.pathname === "/" ||
                           window.location.pathname === "";

          if (isHomePage) {
            console.log("Home page loaded - ensuring proper state");

            // Make sure everything is properly initialized
            setTimeout(() => {
              if (typeof EventHandler.initialize === "function") {
                EventHandler.initialize();
              }

              if (window.sceneInstance) {
                window.sceneInstance.resetTransitionState();
              }

              if (UIManager) {
                UIManager.enforceCorrectUIState(AppState);
              }
            }, 100);
          }
        }
      });
    </script>
  </body>
</html>
