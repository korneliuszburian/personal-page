This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2025-03-01T20:29:18.549Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
.gitignore
astro.config.mjs
package.json
postcss.config.cjs
public/favicon.svg
README.md
src/components/Card.astro
src/components/ParticleSystem.ts
src/components/Scene.ts
src/css-utils/clamp-generator.js
src/css-utils/tokens-to-tailwind.js
src/css/blocks/prose.css
src/css/components/box.css
src/css/components/cluster.css
src/css/components/flow.css
src/css/components/grid.css
src/css/components/icon.css
src/css/components/repel.css
src/css/components/sidebar.css
src/css/components/switcher.css
src/css/components/wrapper.css
src/css/global.css
src/css/global/fonts.css
src/css/global/global-styles.css
src/css/global/reset.css
src/css/global/variables.css
src/css/utilities/region.css
src/css/utilities/visually-hidden.css
src/design-tokens/colors.json
src/design-tokens/fonts.json
src/design-tokens/spacing.json
src/design-tokens/text-leading.json
src/design-tokens/text-sizes.json
src/design-tokens/text-weights.json
src/design-tokens/viewports.json
src/env.d.ts
src/layouts/Layout.astro
src/pages/index.astro
src/pages/photos.astro
tailwind.config.js
tsconfig.json

================================================================
Repository Files
================================================================

================
File: .gitignore
================
# build output
dist/

# generated types
.astro/

# dependencies
node_modules/

# logs
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*

# environment variables
.env
.env.production

# macOS-specific files
.DS_Store

================
File: astro.config.mjs
================
import { defineConfig } from 'astro/config';
import tailwind from "@astrojs/tailwind";
import partytown from "@astrojs/partytown";
import sitemap from "@astrojs/sitemap";

// https://astro.build/config
export default defineConfig({
  integrations: [tailwind({
    applyBaseStyles: false
  }), partytown(), sitemap()]
});

================
File: package.json
================
{
  "name": "astro-cube-boilerplate",
  "type": "module",
  "version": "0.0.1",
  "author": "Frank Stallone <frank@stallone.dev>",
  "description": "A simple Astro boilerplate with CUBE CSS and TailwindCSS",
  "homepage": "https://github.com/frankstallone/astro-cube-boilerplate",
  "scripts": {
    "dev": "astro dev",
    "start": "astro dev",
    "build": "astro check && astro build",
    "preview": "astro preview",
    "astro": "astro"
  },
  "dependencies": {
    "@astrojs/check": "^0.9.4",
    "@astrojs/partytown": "^2.1.2",
    "@astrojs/sitemap": "^3.2.1",
    "@astrojs/tailwind": "^5.1.4",
    "astro": "^5.1.1",
    "slugify": "^1.6.6",
    "tailwindcss": "^3.4.1",
    "three": "^0.160.0",
    "animejs": "^3.2.1",
    "@types/three": "^0.160.0",
    "@types/animejs": "^3.1.12"
  },
  "devDependencies": {
    "prettier": "^3.2.5",
    "prettier-plugin-astro": "^0.13.0",
    "typescript": "^5.3.3"
  },
  "engines": {
    "node": ">=20.12.2"
  },
  "resolutions": {
    "esbuild": "0.24.0"
  }
}

================
File: postcss.config.cjs
================
module.exports = {
  plugins: [
    require('tailwindcss')
  ]
};

================
File: public/favicon.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 128 128">
    <path d="M50.4 78.5a75.1 75.1 0 0 0-28.5 6.9l24.2-65.7c.7-2 1.9-3.2 3.4-3.2h29c1.5 0 2.7 1.2 3.4 3.2l24.2 65.7s-11.6-7-28.5-7L67 45.5c-.4-1.7-1.6-2.8-2.9-2.8-1.3 0-2.5 1.1-2.9 2.7L50.4 78.5Zm-1.1 28.2Zm-4.2-20.2c-2 6.6-.6 15.8 4.2 20.2a17.5 17.5 0 0 1 .2-.7 5.5 5.5 0 0 1 5.7-4.5c2.8.1 4.3 1.5 4.7 4.7.2 1.1.2 2.3.2 3.5v.4c0 2.7.7 5.2 2.2 7.4a13 13 0 0 0 5.7 4.9v-.3l-.2-.3c-1.8-5.6-.5-9.5 4.4-12.8l1.5-1a73 73 0 0 0 3.2-2.2 16 16 0 0 0 6.8-11.4c.3-2 .1-4-.6-6l-.8.6-1.6 1a37 37 0 0 1-22.4 2.7c-5-.7-9.7-2-13.2-6.2Z" />
    <style>
        path { fill: #000; }
        @media (prefers-color-scheme: dark) {
            path { fill: #FFF; }
        }
    </style>
</svg>

================
File: README.md
================
# Astro CUBE CSS Boilerplate

Based on the [CUBE CSS Boilerplate](https://github.com/Set-Creative-Studio/cube-boilerplate). 

The Astro CUBE CSS Boilerplate is a simple, modern, web platform native starting point with sensible defaults. You get the advantages of modern CSS, with the aid of utility classes, and the affordances of design token architecture. 

Uses:
- [Astro](https://astro.build/), a web framework for content-driven websites
- [Utopia](https://utopia.fyi/), for responsive typography, spacing, and sizing
- [Cube CSS](https://cube.fyi/), a pragmatric and simple CSS methodology
- [Every Layouts](https://every-layout.dev/), better, more resilient CSS
- [Tailwind CSS](https://tailwindcss.com/), a utility-first CSS framework, used as utility-second
- [Partytown](https://partytown.builder.io/), for running third-party scripts in a web worker
- [Astro Sitemap](https://docs.astro.build/en/guides/integrations-guide/sitemap/), for generating a sitemap
- Design tokens, bringing sanity to design decisions.

Read more from Andy Bell's [A CSS project boilerplate
](https://piccalil.li/blog/a-css-project-boilerplate/).

## ðŸ§ž Commands

All commands are run from the root of the project, from a terminal:

| Command                   | Action                                           |
| :------------------------ | :----------------------------------------------- |
| `npm install`             | Installs dependencies                            |
| `npm run dev`             | Starts local dev server at `localhost:4321`      |
| `npm run build`           | Build your production site to `./dist/`          |
| `npm run preview`         | Preview your build locally, before deploying     |
| `npm run astro ...`       | Run CLI commands like `astro add`, `astro check` |
| `npm run astro -- --help` | Get help using the Astro CLI                     |

================
File: src/components/Card.astro
================
---
interface Props {
	title: string;
	body: string;
	href: string;
}

const { href, title, body } = Astro.props;
---

<li class="link-card">
	<a href={href}>
		<h2>
			{title}
			<span>&rarr;</span>
		</h2>
		<p>
			{body}
		</p>
	</a>
</li>
<style>
	.link-card {
		list-style: none;
		display: flex;
		padding: 1px;
		background-color: #23262d;
		background-image: none;
		background-size: 400%;
		border-radius: 7px;
		background-position: 100%;
		transition: background-position 0.6s cubic-bezier(0.22, 1, 0.36, 1);
		box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.1);
	}
	.link-card > a {
		width: 100%;
		text-decoration: none;
		line-height: 1.4;
		padding: calc(1.5rem - 1px);
		border-radius: 8px;
		color: white;
		background-color: #23262d;
		opacity: 0.8;
	}
	h2 {
		margin: 0;
		font-size: 1.25rem;
		transition: color 0.6s cubic-bezier(0.22, 1, 0.36, 1);
	}
	p {
		margin-top: 0.5rem;
		margin-bottom: 0;
	}
	.link-card:is(:hover, :focus-within) {
		background-position: 0;
		background-image: var(--accent-gradient);
	}
	.link-card:is(:hover, :focus-within) h2 {
		color: rgb(var(--accent-light));
	}
</style>

================
File: src/components/ParticleSystem.ts
================
// This file can be deleted as we're not using the particle system anymore

================
File: src/components/Scene.ts
================
// src/components/Scene.ts
import * as THREE from 'three';
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';
import { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js';
import { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js';
import { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass.js';
import anime from 'animejs/lib/anime.es.js';

export class Scene {
    private scene: THREE.Scene;
    private camera: THREE.PerspectiveCamera;
    private renderer: THREE.WebGLRenderer;
    private logo: THREE.Group | null = null;
    private isTransitioning: boolean = false;
    private composer: EffectComposer;
    private initialLogoPosition: THREE.Vector3 | null = null;
    private initialLogoRotation: THREE.Euler | null = null;
    private isMenuOpen: boolean = false;
    private mainBeam: THREE.SpotLight;
    private beamMesh: THREE.Mesh;
    private secondaryBeamMesh: THREE.Mesh;

    constructor(container: HTMLElement) {
        console.log("Constructing Scene");

        this.scene = new THREE.Scene();
        this.scene.fog = new THREE.FogExp2(0x000000, 0.005); // Reduced fog density

        this.camera = new THREE.PerspectiveCamera(
            45, // Reduced FOV for better perspective
            window.innerWidth / window.innerHeight,
            0.1,
            1000
        );

        this.renderer = new THREE.WebGLRenderer({
            antialias: true,
            alpha: true,
            powerPreference: "high-performance"
        });
        this.renderer.setSize(window.innerWidth, window.innerHeight);
        this.renderer.setPixelRatio(window.devicePixelRatio); // Full resolution
        this.renderer.toneMapping = THREE.ACESFilmicToneMapping;
        this.renderer.toneMappingExposure = 1.2;
        this.renderer.shadowMap.enabled = true;
        this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;

        // Very important: the renderer canvas must be added to the container
        container.appendChild(this.renderer.domElement);

        // Enhanced post-processing
        this.composer = new EffectComposer(this.renderer);
        const renderPass = new RenderPass(this.scene, this.camera);
        this.composer.addPass(renderPass);
        const bloomPass = new UnrealBloomPass(
            new THREE.Vector2(window.innerWidth, window.innerHeight),
            0.5,
            0.4,
            0.85
        );
        this.composer.addPass(bloomPass);

        this.setupScene();
        this.animate();
        this.handleResize();
        this.setupInteractions();
    }

    private setupScene() {
        // Enhanced lighting setup
        const ambientLight = new THREE.AmbientLight(0xffffff, 0.3);
        this.scene.add(ambientLight);

        // Enhanced beam setup
        this.mainBeam = new THREE.SpotLight(0xffffff, 150);
        this.mainBeam.position.set(0, 15, 5);
        this.mainBeam.angle = Math.PI / 5;
        this.mainBeam.penumbra = 0.3;
        this.mainBeam.decay = 1.2;
        this.mainBeam.distance = 25;
        this.mainBeam.castShadow = true;
        this.scene.add(this.mainBeam);

        // Enhanced volumetric beam effect
        const beamGeometry = new THREE.CylinderGeometry(0.2, 2.5, 15, 32, 1, true);
        const beamMaterial = new THREE.MeshBasicMaterial({
            color: 0x4444ff,
            transparent: true,
            opacity: 0,
            side: THREE.DoubleSide,
            blending: THREE.AdditiveBlending
        });
        this.beamMesh = new THREE.Mesh(beamGeometry, beamMaterial);
        this.beamMesh.position.copy(this.mainBeam.position);
        this.beamMesh.rotation.x = Math.PI;
        this.scene.add(this.beamMesh);

        // Enhanced secondary beam
        this.secondaryBeamMesh = this.beamMesh.clone();
        const secondaryMaterial = beamMaterial.clone();
        secondaryMaterial.opacity = 0.1;
        secondaryMaterial.color.setHex(0x6666ff);
        this.secondaryBeamMesh.material = secondaryMaterial;
        this.secondaryBeamMesh.scale.set(1.8, 1.2, 1.8);
        this.scene.add(this.secondaryBeamMesh);

        // Camera setup for better view
        this.camera.position.set(0, 1, 12); // Moved camera back
        this.camera.lookAt(0, 0, 0);

        // Load logo with path
        const loader = new GLTFLoader();

        // Check if model file exists in the public directory
        // Adjust the path as needed - this should match where you place your model
        const modelPath = '/glass-like-logo-2.glb';

        console.log('Loading model from:', modelPath);

        loader.load(
            modelPath,
            (gltf) => {
                console.log('Model loaded successfully:', gltf);
                this.logo = gltf.scene;

                // Center and scale the model
                const box = new THREE.Box3().setFromObject(this.logo);
                const center = box.getCenter(new THREE.Vector3());
                const size = box.getSize(new THREE.Vector3());

                const maxDim = Math.max(size.x, size.y, size.z);
                const scale = 6 / maxDim; // Increased scale
                this.logo.scale.setScalar(scale);

                this.logo.position.sub(center.multiplyScalar(scale));
                this.scene.add(this.logo);

                const logoMaterial = new THREE.MeshStandardMaterial({
                    metalness: 1.0,
                });

                this.logo.traverse((child) => {
                    if (child instanceof THREE.Mesh) {
                        child.material = logoMaterial;
                        child.castShadow = true;
                        child.receiveShadow = true;
                    }
                });

                // Store initial position and rotation
                this.initialLogoPosition = this.logo.position.clone();
                this.initialLogoRotation = this.logo.rotation.clone();

                this.hideLoadingScreen();
                this.showContinuePrompt();
            },
            (progress) => {
                const percentComplete = (progress.loaded / progress.total) * 100;
                console.log('Loading progress:', percentComplete.toFixed(2) + '%');
            },
            (error) => {
                console.error('Error loading model:', error);
                console.error('Model path attempted:', modelPath);

                // Hide loading screen even if there's an error
                this.hideLoadingScreen();

                // Create a fallback cube if model loading fails
                const geometry = new THREE.BoxGeometry(2, 2, 2);
                const material = new THREE.MeshStandardMaterial({ color: 0x6666ff, metalness: 0.8 });
                const cube = new THREE.Mesh(geometry, material);
                this.scene.add(cube);
                this.logo = new THREE.Group();
                this.logo.add(cube);
                this.scene.add(this.logo);

                // Store initial position and rotation
                this.initialLogoPosition = this.logo.position.clone();
                this.initialLogoRotation = this.logo.rotation.clone();

                this.showContinuePrompt();
            }
        );
    }

    private setupInteractions() {
        window.addEventListener('keydown', (e) => {
            if (e.code === 'Space' && !this.isTransitioning) {
                this.handleContinue();
            }
        });

        window.addEventListener('click', (e) => {
            if (this.logo && !this.isTransitioning) {
                const raycaster = new THREE.Raycaster();
                const mouse = new THREE.Vector2(
                    (e.clientX / window.innerWidth) * 2 - 1,
                    -(e.clientY / window.innerHeight) * 2 + 1
                );
                raycaster.setFromCamera(mouse, this.camera);
                const intersects = raycaster.intersectObject(this.logo, true);

                if (intersects.length > 0) {
                    this.handleContinue();
                }
            }
        });
    }

    private handleContinue() {
        if (this.isMenuOpen || this.isTransitioning) return;

        this.isTransitioning = true;
        const menu = document.getElementById('menu');
        const prompt = document.getElementById('continue-prompt');

        this.isMenuOpen = true;
        const currentY = this.logo!.position.y;

        // Smooth prompt fade out animation
        if (prompt) {
            anime({
                targets: prompt,
                opacity: [1, 0],
                translateY: [0, 30],
                scale: [1, 0.95],
                duration: 600,
                easing: 'easeOutExpo',
                complete: () => prompt.classList.add('hidden')
            });
        }

        const timeline = anime.timeline({
            easing: 'easeInOutQuad'
        });

        timeline
            .add({
                targets: this.logo!.position,
                y: currentY + 3,
                duration: 1200,
                easing: 'easeOutQuad'
            })
            .add({
                targets: this.logo!.rotation,
                y: Math.PI * 3, // Increased rotation
                duration: 1200, // Faster rotation
                easing: 'easeInOutQuad'
            }, '-=1200')
            .add({
                targets: this.logo!.position,
                y: currentY - 1,
                duration: 800,
                easing: 'easeOutBounce'
            })
            .add({
                targets: this.logo!.rotation,
                y: Math.PI * 4,
                duration: 1000,
                easing: 'easeOutQuad'
            }, '-=800')
            .add({
                targets: '#continue-prompt',
                opacity: 0,
                duration: 300
            }, '-=1000')
            .add({
                begin: () => {
                    if (menu) {
                        menu.classList.remove('hidden');
                        menu.classList.add('visible');
                    }
                }
            })
            .add({
                targets: '.menu nav ul li',
                translateY: [20, 0],
                opacity: [0, 1],
                duration: 600,
                delay: anime.stagger(80),
                complete: () => {
                    this.isTransitioning = false;
                }
            });

        // Close menu animation
        const closeMenu = () => {
            if (!this.isTransitioning && this.isMenuOpen) {
                this.isTransitioning = true;

                const closeTimeline = anime.timeline({
                    easing: 'easeInOutQuad'
                });

                closeTimeline
                    .add({
                        targets: '.menu nav ul li',
                        translateY: [0, -20],
                        opacity: [1, 0],
                        duration: 400,
                        delay: anime.stagger(50, { direction: 'reverse' })
                    })
                    .add({
                        targets: '.menu',
                        opacity: 0,
                        duration: 400,
                        complete: () => {
                            if (menu) {
                                menu.classList.add('hidden');
                                menu.classList.remove('visible');
                            }
                        }
                    })
                    // Return animation with up/down motion
                    .add({
                        targets: this.logo!.position,
                        y: currentY + 2,
                        duration: 800,
                        easing: 'easeOutQuad'
                    })
                    .add({
                        targets: this.logo!.rotation,
                        y: this.initialLogoRotation!.y,
                        duration: 1200,
                        easing: 'easeInOutQuad'
                    }, '-=800')
                    .add({
                        targets: this.logo!.position,
                        y: this.initialLogoPosition!.y,
                        duration: 1000,
                        easing: 'easeOutElastic(1, 0.8)',
                        complete: () => {
                            this.isTransitioning = false;
                            this.isMenuOpen = false;
                        }
                    });
            }
        };

        // Add menu close handlers
        if (menu) {
            menu.addEventListener('click', (e) => {
                if (e.target === menu) {
                    closeMenu();
                }
            });

            window.addEventListener('keydown', (e) => {
                if (e.code === 'Escape' && this.isMenuOpen) {
                    closeMenu();
                }
            });
        }
    }

    private animate = () => {
        requestAnimationFrame(this.animate);

        if (this.logo) {
            const time = performance.now() * 0.001;

            if (this.isMenuOpen && !this.isTransitioning) {
                // Enhanced background effects
                this.logo.rotation.y += 0.0005;

                // Pulsing beam effect
                const pulseIntensity = Math.sin(time * 0.5) * 0.3 + 0.7;
                this.mainBeam.intensity = 150 + (50 * pulseIntensity);

                // Dynamic beam opacity
                (this.beamMesh.material as THREE.MeshBasicMaterial).opacity = 0.2 + (0.1 * pulseIntensity);
                (this.secondaryBeamMesh.material as THREE.MeshBasicMaterial).opacity = 0.1 + (0.05 * pulseIntensity);

                // Dynamic fog density
                this.scene.fog = new THREE.FogExp2(0x000000, 0.005 + (0.002 * pulseIntensity));
            } else if (!this.isTransitioning) {
                // Normal animation state
                this.logo.rotation.y += 0.001;
                this.logo.position.y = Math.sin(time * 0.5) * 0.1 + Math.sin(time * 0.2) * 0.03;
                this.logo.rotation.x = Math.sin(time * 0.3) * 0.02;
                this.logo.rotation.z = Math.cos(time * 0.2) * 0.02;

                // Reset effects
                this.mainBeam.intensity = 100;
                (this.beamMesh.material as THREE.MeshBasicMaterial).opacity = 0.15;
                (this.secondaryBeamMesh.material as THREE.MeshBasicMaterial).opacity = 0.08;
                this.scene.fog = new THREE.FogExp2(0x000000, 0.005);
            }
        }

        this.composer.render();
    }

    // Method to handle page transitions
    public prepareForTransition() {
        if (this.logo) {
            // During transitions, just keep rotating gently
            this.isTransitioning = true;

            // Cancel any active animations
            anime.remove(this.logo.position);
            anime.remove(this.logo.rotation);

            // After a short delay, we'll return to normal animations
            setTimeout(() => {
                this.isTransitioning = false;
            }, 800);
        }
    }

    private handleResize = () => {
        window.addEventListener('resize', () => {
            this.camera.aspect = window.innerWidth / window.innerHeight;
            this.camera.updateProjectionMatrix();
            this.renderer.setSize(window.innerWidth, window.innerHeight);
            this.composer.setSize(window.innerWidth, window.innerHeight);
        });
    }

    private hideLoadingScreen() {
        const loadingScreen = document.getElementById('loading-screen');
        if (loadingScreen) {
            loadingScreen.style.opacity = '0';
            setTimeout(() => {
                loadingScreen.style.display = 'none';
            }, 500);
        }
    }

    private showContinuePrompt() {
        const prompt = document.getElementById('continue-prompt');
        if (prompt) {
            prompt.classList.remove('hidden');

            // Split text for letter animation
            const text = prompt.textContent || '';
            prompt.innerHTML = text.split('').map(char =>
                char === ' ' ? ' ' : `<span>${char}</span>`
            ).join('');

            // Staggered letter animation
            anime.timeline({
                easing: 'easeOutElastic(1, 0.8)'
            })
            .add({
                targets: prompt,
                opacity: 1,
                translateY: [30, 0],
                duration: 800
            })
            .add({
                targets: '#continue-prompt span',
                translateY: [-20, 0],
                opacity: [0, 1],
                delay: anime.stagger(30),
                duration: 600,
                complete: () => {
                    prompt.style.opacity = '1'; // Enable CSS animation
                }
            }, '-=400');
        }
    }
}

================
File: src/css-utils/clamp-generator.js
================
const viewports = require('../design-tokens/viewports.json');

/**
 * Takes an array of tokens and sends back and array of name
 * and clamp pairs for CSS fluid values.
 *
 * @param {array} tokens array of {name: string, min: number, max: number}
 * @returns {array} {name: string, value: string}
 */
const clampGenerator = tokens => {
  const rootSize = 16;

  return tokens.map(({name, min, max}) => {
    if (min === max) {
      return `${min / rootSize}rem`;
    }

    // Convert the min and max sizes to rems
    const minSize = min / rootSize;
    const maxSize = max / rootSize;

    // Convert the pixel viewport sizes into rems
    const minViewport = viewports.min / rootSize;
    const maxViewport = viewports.max / rootSize;

    // Slope and intersection allow us to have a fluid value but also keep that sensible
    const slope = (maxSize - minSize) / (maxViewport - minViewport);
    const intersection = -1 * minViewport * slope + minSize;

    return {
      name,
      value: `clamp(${minSize}rem, ${intersection.toFixed(2)}rem + ${(
        slope * 100
      ).toFixed(2)}vw, ${maxSize}rem)`
    };
  });
};

module.exports = clampGenerator;

================
File: src/css-utils/tokens-to-tailwind.js
================
const slugify = require('slugify');

/**
 * Converts human readable tokens into tailwind config friendly ones
 *
 * @param {array} tokens {name: string, value: any}
 * @return {object} {key, value}
 */
const tokensToTailwind = tokens => {
  const nameSlug = text => slugify(text, {lower: true});
  let response = {};

  tokens.forEach(({name, value}) => {
    response[nameSlug(name)] = value;
  });

  return response;
};

module.exports = tokensToTailwind;

================
File: src/css/blocks/prose.css
================
.prose {
  --flow-space: var(--space-m);
}

================
File: src/css/components/box.css
================
/*
BOX
More info: https://every-layout.dev/layouts/box/#the-generator
*/

.box {
    background: var(--color-light);
    color: var(--color-dark);
    padding: var(--space-s-m);
  }
  
  .box * {
    color: inherit;
  }
  
  .box.invert {
    background: var(--color-dark);
    color: var(--color-light);
  }

================
File: src/css/components/cluster.css
================
/*
CLUSTER
More info: https://every-layout.dev/layouts/cluster/
A layout that lets you distribute items with consitent
spacing, regardless of their size

CUSTOM PROPERTIES AND CONFIGURATION
--gutter (var(--space-s-m)): This defines the space
between each item.

--cluster-horizontal-alignment (flex-start) How items should align
horizontally. Can be any acceptable flexbox aligmnent value.

--cluster-vertical-alignment How items should align vertically.
Can be any acceptable flexbox alignment value.
*/

.cluster {
  display: flex;
  flex-wrap: wrap;
  gap: var(--gutter, var(--space-s-m));
  justify-content: var(--cluster-horizontal-alignment, flex-start);
  align-items: var(--cluster-vertical-alignment, center);
}

================
File: src/css/components/flow.css
================
/* 
FLOW COMPOSITION 
Like the Every Layout stack: https://every-layout.dev/layouts/stack/
Info about this implementation: https://piccalil.li/quick-tip/flow-utility/ 
*/
.flow > * + * {
  margin-top: var(--flow-space, 1em);
}

================
File: src/css/components/grid.css
================
/* AUTO GRID
Related Every Layout: https://every-layout.dev/layouts/grid/
More info on the flexible nature: https://piccalil.li/tutorial/create-a-responsive-grid-layout-with-no-media-queries-using-css-grid/
A flexible layout that will create an auto-fill grid with
configurable grid item sizes

CUSTOM PROPERTIES AND CONFIGURATION
--gutter (var(--space-s-m)): This defines the space
between each item.

--grid-min-item-size (14rem): How large each item should be
ideally, as a minimum.

--grid-placement (auto-fill): Set either auto-fit or auto-fill
to change how empty grid tracks are handled */

.grid {
  display: grid;
  grid-template-columns: repeat(
    var(--grid-placement, auto-fill),
    minmax(var(--grid-min-item-size, 16rem), 1fr)
  );
  gap: var(--gutter, var(--space-s-l));
}

/* A split 50/50 layout */
.grid[data-layout='50-50'] {
  --grid-placement: auto-fit;
  --grid-min-item-size: clamp(16rem, 50vw, 33rem);
}

/* Three column grid layout */
.grid[data-layout='thirds'] {
  --grid-placement: auto-fit;
  --grid-min-item-size: clamp(16rem, 33%, 20rem);
}

/* Twelve column grid layout */
.grid[data-layout='twelfths'] {
  display: grid;
  grid-template-columns: repeat(12, 1fr);
}

/* Special layout for larger devices. Used on home page intro */
.grid[data-layout='lg:10/2'] {
  grid-template-columns: 100%;
}

@media screen(md) {
  .grid[data-layout='lg:10/2'] {
    grid-template-columns: clamp(40rem, 80vw, 60rem);
  }
}

@media screen(lg) {
  .grid[data-layout='lg:10/2'] {
    grid-template-columns: 10fr 2fr;
  }
}

================
File: src/css/components/icon.css
================
/* 
ICON
From Every Layout: https://every-layout.dev/layouts/icon/
*/

.icon {
    width: 0.75em;
    width: 1cap;
    height: 0.75em;
    height: 1cap;
  }
  
  .with-icon {
    display: inline-flex;
    align-items: baseline;
  }
  
  .with-icon .icon {
    margin-inline-end: 1rem;
  }

================
File: src/css/components/repel.css
================
/*
REPEL
A little layout that pushes items away from each other where
there is space in the viewport and stacks on small viewports

CUSTOM PROPERTIES AND CONFIGURATION
--gutter (var(--space-s-m)): This defines the space
between each item.

--repel-vertical-alignment How items should align vertically.
Can be any acceptable flexbox alignment value.
*/
.repel {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  align-items: var(--repel-vertical-alignment, center);
  gap: var(--gutter, var(--space-s-m));
}

.repel[data-nowrap] {
  flex-wrap: nowrap;
}

================
File: src/css/components/sidebar.css
================
/* 
SIDEBAR
More info: https://every-layout.dev/layouts/sidebar/
A layout that allows you to have a flexible main content area
and a "fixed" width sidebar that sits on the left or right.
If there is not enough viewport space to fit both the sidebar
width *and* the main content minimum width, they will stack
on top of each other

CUSTOM PROPERTIES AND CONFIGURATION
--gutter (var(--space-size-1)): This defines the space
between the sidebar and main content.

--sidebar-target-width (20rem): How large the sidebar should be

--sidebar-content-min-width(50%): The minimum size of the main content area

EXCEPTIONS
.sidebar[data-direction='rtl']: flips the sidebar to be on the right 
*/
.sidebar {
  display: flex;
  flex-wrap: wrap;
  gap: var(--gutter, var(--space-s-l));
}

.sidebar > :first-child {
  flex-basis: var(--sidebar-target-width, 20rem);
  flex-grow: 1;
}

.sidebar > :last-child {
  flex-basis: 0;
  flex-grow: 999;
  min-width: var(--sidebar-content-min-width, 50%);
}

================
File: src/css/components/switcher.css
================
/*
SWITCHER
More info: https://every-layout.dev/layouts/switcher/
A layout that allows you to lay **2** items next to each other
until there is not enough horizontal space to allow that.

CUSTOM PROPERTIES AND CONFIGURATION
--gutter (var(--space-size-1)): This defines the space
between each item

--switcher-target-container-width (40rem): How large the container
needs to be to allow items to sit inline with each other

--switcher-vertical-alignment How items should align vertically.
Can be any acceptable flexbox alignment value.
*/
.switcher {
  display: flex;
  flex-wrap: wrap;
  gap: var(--gutter, var(--space-s-l));
  align-items: var(--switcher-vertical-alignment, flex-start);
}

.switcher > * {
  flex-grow: 1;
  flex-basis: calc((var(--switcher-target-container-width, 40rem) - 100%) * 999);
}

/* Max 2 items,
so anything greater than 2 is ful width */
.switcher > :nth-child(n + 3) {
  flex-basis: 100%;
}

================
File: src/css/components/wrapper.css
================
/*
WRAPPER COMPOSITION 
A common wrapper/container
*/
.wrapper {
  margin-inline: auto;
  max-width: clamp(16rem, var(--wrapper-max-width, 100vw), 80rem);
  padding-left: var(--gutter);
  padding-right: var(--gutter);
  position: relative;
}

================
File: src/css/global.css
================
@import 'tailwindcss/base';

@import 'global/reset.css';
@import 'global/fonts.css';

@import 'tailwindcss/components';

@import 'global/variables.css';
@import 'global/global-styles.css';
/* 
See issue: https://github.com/frankstallone/astro-cube-boilerplate/issues/1
Reference source: https://github.com/Set-Creative-Studio/cube-boilerplate/blob/main/src/css/global.css#L11

@import-glob 'blocks/*.css' layer(components);
@import-glob 'components/*.css' layer(components);
@import-glob 'utilities/*.css' layer(components); 
*/

@import 'blocks/prose.css' layer(components);
@import 'components/box.css' layer(components);
@import 'components/cluster.css' layer(components);
@import 'components/flow.css' layer(components);
@import 'components/grid.css' layer(components);
@import 'components/icon.css' layer(components);
@import 'components/repel.css' layer(components);
@import 'components/sidebar.css' layer(components);
@import 'components/switcher.css' layer(components);
@import 'components/wrapper.css' layer(components);
@import 'utilities/region.css' layer(components);
@import 'utilities/visually-hidden.css' layer(components);

@import 'tailwindcss/utilities';

================
File: src/css/global/fonts.css
================
/* @font-face here */

================
File: src/css/global/global-styles.css
================
/* 
  Global styles 

  Low-specificity, global styles that apply to the whole 
  project: https://cube.fyi/css.html
*/

body {
  background: var(--color-light);
  color: var(--color-dark);
  font-size: var(--size-step-0);
  font-family: var(--font-base);
  line-height: var(--leading-standard);
}

================
File: src/css/global/reset.css
================
/* Modern reset: https://piccalil.li/blog/a-more-modern-css-reset/ */

/* Box sizing rules */
*,
*::before,
*::after {
  box-sizing: border-box;
}

/* Prevent font size inflation */
html {
  -moz-text-size-adjust: none;
  -webkit-text-size-adjust: none;
  text-size-adjust: none;
}

/* Remove default margin in favour of better control in authored CSS */
body,
h1,
h2,
h3,
h4,
p,
figure,
blockquote,
dl,
dd {
  margin: 0;
}

/* Remove list styles on ul, ol elements with a list role, which suggests default styling will be removed */
ul[role='list'],
ol[role='list'] {
  list-style: none;
}

/* Set core body defaults */
body {
  min-height: 100vh;
  line-height: 1.5;
}

/* Set shorter line heights on headings and interactive elements */
h1,
h2,
h3,
h4,
button,
input,
label {
  line-height: 1.1;
}

/* Balance text wrapping on headings */
h1,
h2,
h3,
h4 {
  text-wrap: balance;
}

/* A elements that don't have a class get default styles */
a:not([class]) {
  text-decoration-skip-ink: auto;
  color: currentColor;
}

/* Make images easier to work with */
img,
picture {
  max-width: 100%;
  display: block;
}

/* Inherit fonts for inputs and buttons */
input,
button,
textarea,
select {
  font: inherit;
}

/* Make sure textareas without a rows attribute are not tiny */
textarea:not([rows]) {
  min-height: 10em;
}

/* Anything that has been anchored to should have extra scroll margin */
:target {
  scroll-margin-block: 5ex;
}

================
File: src/css/global/variables.css
================
:root {
  --gutter: var(--space-s-l);
  --transition-base: 250ms ease;
  --transition-movement: 200ms linear;
  --transition-fade: 300ms ease;
  --transition-bounce: 500ms cubic-bezier(0.5, 0.05, 0.2, 1.5);
  --leading-standard: 1.5;
}

================
File: src/css/utilities/region.css
================
/* 
REGION UTILITY
Consistent block padding for page sections
*/
.region {
  padding-block: var(--region-space, var(--space-xl-2xl));
}

================
File: src/css/utilities/visually-hidden.css
================
/* 
VISUALLY HIDDEN UTILITY
Info: https://piccalil.li/quick-tip/visually-hidden/ 
*/
.visually-hidden {
  border: 0;
  clip: rect(0 0 0 0);
  height: 0;
  margin: 0;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
  white-space: nowrap;
}

================
File: src/design-tokens/colors.json
================
{
  "title": "Colors",
  "description": "Hex color codes that can be shared, cross-platform. They can be converted at point of usage, such as HSL for web or CMYK for print.",
  "items": [
    {
      "name": "Transparent",
      "value": "transparent"
    },
    {
      "name": "Dark",
      "value": "#030303"
    },
    {
      "name": "Light",
      "value": "#ffffff"
    },
    {
      "name": "Primary",
      "value": "#02394A"
    }
  ]
}

================
File: src/design-tokens/fonts.json
================
{
  "title": "Fonts",
  "description": "Each array of fonts creates a priority-based order. The first font in the array should be the ideal font, followed by sensible, web-safe fallbacks",
  "items": [
    {
      "name": "Base",
      "description": "System fonts for body copy and globally set text.",
      "value": ["Inter", "Segoe UI", "Roboto", "Helvetica Neue", "Arial", "sans-serif"]
    }
  ]
}

================
File: src/design-tokens/spacing.json
================
{
  "title": "Spacing",
  "description": "Consistent spacing sizes, based on a ratio, with min and max sizes. This allows you to set spacing based on the context size. For example, min for mobile and max for desktop browsers.",
  "meta": {
    "scaleGenerator": "https://utopia.fyi/space/calculator/?c=330,18,1.2,1200,24,1.25,6,2,&s=0.75|0.5|0.25,1.5|2|3|4|6|8,s-l|s-xl&g=s,l,xl,12"
  },
  "items": [
    {
      "name": "Zero",
      "min": 0,
      "max": 1
    },
    {
      "name": "3XS",
      "min": 5,
      "max": 6
    },
    {
      "name": "2XS",
      "min": 9,
      "max": 12
    },
    {
      "name": "XS",
      "min": 14,
      "max": 18
    },
    {
      "name": "S",
      "min": 18,
      "max": 24
    },
    {
      "name": "M",
      "min": 27,
      "max": 36
    },
    {
      "name": "L",
      "min": 36,
      "max": 48
    },
    {
      "name": "XL",
      "min": 54,
      "max": 72
    },
    {
      "name": "2XL",
      "min": 72,
      "max": 96
    },
    {
      "name": "3XL",
      "min": 108,
      "max": 144
    },
    {
      "name": "4XL",
      "min": 144,
      "max": 192
    },
    {
      "name": "3XS - 2XS",
      "min": 5,
      "max": 12
    },
    {
      "name": "2XS - XS",
      "min": 9,
      "max": 18
    },
    {
      "name": "XS - S",
      "min": 14,
      "max": 24
    },
    {
      "name": "S - M",
      "min": 18,
      "max": 36
    },
    {
      "name": "M - L",
      "min": 27,
      "max": 48
    },
    {
      "name": "L - XL",
      "min": 36,
      "max": 72
    },
    {
      "name": "XL - 2XL",
      "min": 54,
      "max": 96
    },
    {
      "name": "2XL - 3XL",
      "min": 72,
      "max": 144
    },
    {
      "name": "3XL - 4XL",
      "min": 108,
      "max": 192
    },
    {
      "name": "S - L",
      "min": 18,
      "max": 48
    },
    {
      "name": "S - XL",
      "min": 18,
      "max": 72
    }
  ]
}

================
File: src/design-tokens/text-leading.json
================
{
  "title": "Leading",
  "description": "Ratio-based leading/line-height values",
  "items": [
    {
      "name": "Flat",
      "value": 1
    },
    {
      "name": "Fine",
      "value": 1.15
    },
    {
      "name": "Standard",
      "value": 1.5
    },
    {
      "name": "Loose",
      "value": 1.7
    }
  ]
}

================
File: src/design-tokens/text-sizes.json
================
{
  "title": "Text Sizes",
  "description": "A minimum and maximum text size size allows you to pick the right size from a ratio, depending on the context size. The min and max sizes are in pixels and should be converted to appropiate sizes, per context. For example, for web, the should be converted to REM units (pixelSize / baseSize)",
  "meta": {
    "scaleGenerator": "https://utopia.fyi/type/calculator/?c=330,18,1.175,1200,24,1.25,7,1,&s=0.75%7C0.5%7C0.25,1.5%7C2%7C3%7C4%7C6,s-l&g=s,l,xl,12"
  },
  "items": [
    {
      "name": "Step 000",
      "min": 12,
      "max": 14
    },
    {
      "name": "Step 00",
      "min": 15,
      "max": 16
    },
    {
      "name": "Step 0",
      "min": 18,
      "max": 20
    },
    {
      "name": "Step 1",
      "min": 21.6,
      "max": 25
    },
    {
      "name": "Step 2",
      "min": 25.92,
      "max": 31.25
    },
    {
      "name": "Step 3",
      "min": 31.1,
      "max": 39.06
    },
    {
      "name": "Step 4",
      "min": 39.06,
      "max": 48.83
    },
    {
      "name": "Step 5",
      "min": 44.79,
      "max": 61.04
    }
  ]
}

================
File: src/design-tokens/text-weights.json
================
{
  "title": "Text Weights",
  "description": "Helper classes and custom properties for common font weights",
  "meta": {},
  "items": [
    {
      "name": "Regular",
      "value": 400
    },
    {
      "name": "Medium",
      "value": 500
    },
    {
      "name": "Bold",
      "value": 700
    }
  ]
}

================
File: src/design-tokens/viewports.json
================
{
  "title": "Viewports",
  "description": "The min and maximum viewports used to generate fluid type and space scales.",
  "min": 330,
  "mid": 760,
  "max": 1230
}

================
File: src/env.d.ts
================
/// <reference types="astro/client" />

================
File: src/layouts/Layout.astro
================
---
import "../css/global.css";
import { ClientRouter } from 'astro:transitions';
interface Props {
  title: string;
}
const { title } = Astro.props;
---
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="3D Card Game Shop" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Outfit:wght@300;400;600&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Rajdhani:wght@300;500;700&display=swap" rel="stylesheet">
    <title>{title}</title>
    <ClientRouter />
  </head>
  <body>
    <!-- Loading screen -->
    <div id="loading-screen" transition:persist>
      <div class="loader"></div>
    </div>

    <!-- Three.js scene container - this is just for the 3D background -->
    <div id="scene-container" transition:persist>
      <!-- Three.js canvas will be inserted here -->
    </div>

    <!-- Continue prompt -->
    <div id="continue-prompt" class="hidden" transition:persist>
      Press Space or Click Logo to Continue
    </div>

    <!-- Menu overlay -->
    <div id="menu" class="menu hidden" transition:persist>
      <nav>
        <ul>
          <li><a href="#" class="strike">Nowa kolekcja</a></li>
          <li><a href="/photos">ZdjÄ™cia</a></li>
          <li><a href="#posters">Plakaty</a></li>
          <li><a href="#items">Itemy</a></li>
        </ul>
      </nav>
    </div>

    <!-- Page content container - separate from the 3D background -->
    <main id="page-content">
      <slot />
    </main>
  </body>
</html>

<style>
  #loading-screen {
    position: fixed;
    width: 100vw;
    height: 100vh;
    background: #000;
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
    transition: opacity 0.5s ease;
  }

  .loader {
    width: 50px;
    height: 50px;
    border: 5px solid #333;
    border-top-color: #fff;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  #scene-container {
    position: fixed;
    width: 100vw;
    height: 100vh;
    z-index: 1;
    background: #000;
  }

  #page-content {
    position: relative;
    z-index: 5;
    width: 100%;
    min-height: 100vh;
  }

  #continue-prompt {
    position: fixed;
    bottom: 2rem;
    left: 50%;
    transform: translateX(-50%);
    color: white;
    font-family: 'Rajdhani', sans-serif;
    font-size: 1.4rem;
    font-weight: 500;
    opacity: 0;
    z-index: 100;
    letter-spacing: 0.15em;
    text-transform: uppercase;
    text-shadow: 0 0 10px rgba(255,255,255,0.5),
                 0 0 20px rgba(255,255,255,0.3);
    animation: glowPulse 3s infinite;
    white-space: nowrap;
    transform-origin: center bottom;
    transition: none;
  }

  @keyframes glowPulse {
    0%, 100% {
      opacity: 0.7;
      transform: translateX(-50%) scale(0.98);
      text-shadow: 0 0 10px rgba(255,255,255,0.3),
                   0 0 20px rgba(255,255,255,0.2);
    }
    50% {
      opacity: 1;
      transform: translateX(-50%) scale(1);
      text-shadow: 0 0 15px rgba(255,255,255,0.5),
                   0 0 30px rgba(255,255,255,0.3),
                   0 0 40px rgba(100,149,237,0.3);
    }
  }

  .hidden {
    display: none;
  }

  @keyframes spin {
    to { transform: rotate(360deg); }
  }

  .menu {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    background: rgba(0, 0, 0, 0.8);
    opacity: 0;
    transition: opacity 0.5s;
    pointer-events: none;
    z-index: 500;
  }

  .menu.visible {
    opacity: 1;
    pointer-events: all;
  }

  .menu nav ul {
    list-style: none;
    padding: 0;
    margin: 0;
    text-align: center;
  }

  .menu nav ul li {
    margin: 2rem 0;
    transform: translateY(20px);
    opacity: 0;
    transition: all 0.3s;
  }

  .menu.visible nav ul li {
    transform: translateY(0);
    opacity: 1;
  }

  .menu nav ul li a {
    font-family: 'Rajdhani', sans-serif;
    font-weight: 700;
    letter-spacing: 0.1em;
    color: white;
    text-decoration: none;
    font-size: 2rem;
    transition: color 0.3s;
  }

  .menu nav ul li a:hover {
    color: #f0f0f0;
  }

  .menu nav ul li a.strike {
    text-decoration: line-through;
    opacity: 0.5;
    pointer-events: none;
  }
</style>

<script>
  import { Scene } from '../components/Scene';

  let sceneInstance;
  let menuVisible = false;

  // Initialize the scene on first page load
  function initScene() {
    const container = document.getElementById('scene-container');
    if (container && !document.querySelector('#scene-container canvas')) {
      console.log("Initializing Scene");
      const scene = new Scene(container);
      sceneInstance = scene;
    }
  }

  // Setup menu handlers
  function setupMenuHandlers() {
    const menu = document.getElementById('menu');

    // Track menu state for transitions
    document.addEventListener('astro:before-navigation', () => {
      menuVisible = menu?.classList.contains('visible') || false;

      if (menuVisible && menu) {
        menu.classList.remove('visible');
      }

      // Prepare scene for transition
      if (sceneInstance) {
        sceneInstance.prepareForTransition();
      }
    });

    document.addEventListener('astro:after-navigation', () => {
      if (menuVisible && menu) {
        menu.classList.add('visible');
      }
    });

    // Handle navigation clicks
    const navLinks = document.querySelectorAll('.menu nav ul li a:not(.strike)');
    navLinks.forEach(link => {
      link.addEventListener('click', () => {
        if (!link.classList.contains('strike')) {
          menuVisible = false;
          if (menu) {
            menu.classList.remove('visible');
          }
        }
      });
    });
  }

  // Initial load
  document.addEventListener('DOMContentLoaded', () => {
    initScene();
    setupMenuHandlers();
  });

  // After navigation
  document.addEventListener('astro:load', () => {
    // Reinitialize scene if needed
    if (!document.querySelector('#scene-container canvas')) {
      initScene();
    }
    setupMenuHandlers();
  });
</script>

================
File: src/pages/index.astro
================
---
import Layout from '../layouts/Layout.astro';
---
<Layout title="3D Card Game Shop">
  <div class="home-content">
    <h1>Welcome to the 3D Card Game Shop</h1>
    <p>Explore our collection of premium card games.</p>
  </div>
</Layout>

<script>
  // Any page-specific JavaScript can go here
</script>

<style>
  .home-content {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    color: white;
    text-align: center;
    padding: 2rem;
    /* Only show content when menu is open */
    opacity: 0;
    transition: opacity 0.5s ease;
  }

  /* Make content visible when menu is visible */
  :global(#menu.visible) ~ .home-content {
    opacity: 1;
  }

  h1 {
    font-family: 'Rajdhani', sans-serif;
    font-size: 3rem;
    font-weight: 700;
    margin-bottom: 1rem;
    letter-spacing: 0.1em;
    text-transform: uppercase;
    text-shadow: 0 0 15px rgba(255,255,255,0.3),
                 0 0 30px rgba(100,149,237,0.3);
  }

  p {
    font-family: 'Outfit', sans-serif;
    font-size: 1.2rem;
    max-width: 600px;
    margin: 0 auto;
  }
</style>

================
File: src/pages/photos.astro
================
---
import Layout from '../layouts/Layout.astro';
---
<Layout title="Photos | 3D Card Game Shop">
  <div class="photos-container">
    <div class="photos-header">
      <h1>Photo Gallery</h1>
      <a href="/" class="back-button">Back to Home</a>
    </div>

    <div class="photos-grid">
      <div class="photo-item">
        <img src="https://source.unsplash.com/random/800x600?fantasy-cards" alt="Fantasy cards" />
        <div class="photo-caption">Fantasy Collection</div>
      </div>
      <div class="photo-item">
        <img src="https://source.unsplash.com/random/800x600?card-game" alt="Card game" />
        <div class="photo-caption">Tournament Series</div>
      </div>
      <div class="photo-item">
        <img src="https://source.unsplash.com/random/800x600?trading-cards" alt="Trading cards" />
        <div class="photo-caption">Limited Edition</div>
      </div>
      <div class="photo-item">
        <img src="https://source.unsplash.com/random/800x600?game-night" alt="Game night" />
        <div class="photo-caption">Game Night</div>
      </div>
    </div>
  </div>
</Layout>

<style>
  .photos-container {
    position: relative;
    z-index: 10;
    padding: 4rem 2rem;
    color: white;
    max-width: 1200px;
    margin: 0 auto;
    opacity: 0;
    animation: fadeIn 0.8s forwards;
    animation-delay: 0.3s;
  }

  .photos-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 3rem;
    flex-wrap: wrap;
    gap: 1rem;
  }

  h1 {
    font-family: 'Rajdhani', sans-serif;
    font-size: 3rem;
    font-weight: 700;
    letter-spacing: 0.1em;
    text-transform: uppercase;
    text-shadow: 0 0 15px rgba(255,255,255,0.3),
                 0 0 30px rgba(100,149,237,0.3);
    margin: 0;
  }

  .back-button {
    font-family: 'Rajdhani', sans-serif;
    font-size: 1rem;
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.1em;
    color: white;
    background: rgba(0, 0, 0, 0.5);
    border: 1px solid rgba(255, 255, 255, 0.3);
    padding: 0.6rem 1.2rem;
    border-radius: 4px;
    text-decoration: none;
    transition: all 0.3s ease;
  }

  .back-button:hover {
    background: rgba(100, 149, 237, 0.2);
    border-color: rgba(255, 255, 255, 0.5);
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
  }

  .photos-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
    gap: 2rem;
  }

  .photo-item {
    position: relative;
    aspect-ratio: 4/3;
    overflow: hidden;
    border-radius: 8px;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.3);
  }

  .photo-item:hover {
    transform: scale(1.02) translateY(-5px);
    box-shadow: 0 15px 30px rgba(0, 0, 0, 0.4);
  }

  .photo-item img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: opacity 0.3s ease, transform 0.5s ease;
  }

  .photo-item:hover img {
    opacity: 0.9;
    transform: scale(1.05);
  }

  .photo-caption {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    padding: 1rem;
    background: rgba(0, 0, 0, 0.7);
    color: white;
    font-family: 'Outfit', sans-serif;
    font-weight: 500;
    transform: translateY(100%);
    transition: transform 0.3s ease;
  }

  .photo-item:hover .photo-caption {
    transform: translateY(0);
  }

  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
  }

  @media (max-width: 768px) {
    .photos-header {
      flex-direction: column;
      align-items: flex-start;
    }

    h1 {
      font-size: 2.2rem;
    }

    .photos-grid {
      grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
      gap: 1.5rem;
    }
  }
</style>

================
File: tailwind.config.js
================
const plugin = require('tailwindcss/plugin');
const postcss = require('postcss');
const postcssJs = require('postcss-js');

const clampGenerator = require('./src/css-utils/clamp-generator.js');
const tokensToTailwind = require('./src/css-utils/tokens-to-tailwind.js');

// Raw design tokens
const colorTokens = require('./src/design-tokens/colors.json');
const fontTokens = require('./src/design-tokens/fonts.json');
const spacingTokens = require('./src/design-tokens/spacing.json');
const textSizeTokens = require('./src/design-tokens/text-sizes.json');
const textLeadingTokens = require('./src/design-tokens/text-leading.json');
const textWeightTokens = require('./src/design-tokens/text-weights.json');
const viewportTokens = require('./src/design-tokens/viewports.json');

// Process design tokens
const colors = tokensToTailwind(colorTokens.items);
const fontFamily = tokensToTailwind(fontTokens.items);
const fontWeight = tokensToTailwind(textWeightTokens.items);
const fontSize = tokensToTailwind(clampGenerator(textSizeTokens.items));
const lineHeight = tokensToTailwind(textLeadingTokens.items);
const spacing = tokensToTailwind(clampGenerator(spacingTokens.items));

module.exports = {
  content: ['./src/**/*.{html,js,jsx,mdx,njk,twig,vue}'],
  // Add color classes to safe list so they are always generated
  safelist: [],
  presets: [],
  theme: {
    screens: {
      sm: `${viewportTokens.min}px`,
      md: `${viewportTokens.mid}px`,
      lg: `${viewportTokens.max}px`
    },
    colors,
    spacing,
    fontSize,
    lineHeight,
    fontFamily,
    fontWeight,
    backgroundColor: ({theme}) => theme('colors'),
    textColor: ({theme}) => theme('colors'),
    margin: ({theme}) => ({
      auto: 'auto',
      ...theme('spacing')
    }),
    padding: ({theme}) => theme('spacing')
  },
  variantOrder: [
    'first',
    'last',
    'odd',
    'even',
    'visited',
    'checked',
    'empty',
    'read-only',
    'group-hover',
    'group-focus',
    'focus-within',
    'hover',
    'focus',
    'focus-visible',
    'active',
    'disabled'
  ],

  // Disables Tailwind's reset and usage of rgb/opacity
  corePlugins: {
    preflight: false,
    textOpacity: false,
    backgroundOpacity: false,
    borderOpacity: false
  },

  // Prevents Tailwind's core components
  blocklist: ['container'],

  // Prevents Tailwind from generating that wall of empty custom properties 
  experimental: {
    optimizeUniversalDefaults: true
  },

  plugins: [
    // Generates custom property values from tailwind config
    plugin(function ({addComponents, config}) {
      let result = '';

      const currentConfig = config();

      const groups = [
        {key: 'colors', prefix: 'color'},
        {key: 'spacing', prefix: 'space'},
        {key: 'fontSize', prefix: 'size'},
        {key: 'lineHeight', prefix: 'leading'},
        {key: 'fontFamily', prefix: 'font'},
        {key: 'fontWeight', prefix: 'font'}
      ];

      groups.forEach(({key, prefix}) => {
        const group = currentConfig.theme[key];

        if (!group) {
          return;
        }

        Object.keys(group).forEach(key => {
          result += `--${prefix}-${key}: ${group[key]};`;
        });
      });

      addComponents({
        ':root': postcssJs.objectify(postcss.parse(result))
      });
    }),

    // Generates custom utility classes
    plugin(function ({addUtilities, config}) {
      const currentConfig = config();
      const customUtilities = [
        {key: 'spacing', prefix: 'flow-space', property: '--flow-space'},
        {key: 'spacing', prefix: 'region-space', property: '--region-space'},
        {key: 'spacing', prefix: 'gutter', property: '--gutter'}
      ];

      customUtilities.forEach(({key, prefix, property}) => {
        const group = currentConfig.theme[key];

        if (!group) {
          return;
        }

        Object.keys(group).forEach(key => {
          addUtilities({
            [`.${prefix}-${key}`]: postcssJs.objectify(
              postcss.parse(`${property}: ${group[key]}`)
            )
          });
        });
      });
    })
  ]
};

================
File: tsconfig.json
================
{
  "extends": "astro/tsconfigs/strict",
  "exclude": ["./dist"]
}
